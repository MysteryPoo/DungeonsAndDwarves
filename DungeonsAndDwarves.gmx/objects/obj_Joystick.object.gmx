<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Joystick</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties
DeviceID = 0;
image_alpha = 0.5;
CenterX = x;
CenterY = y;
Selected = false;
Angle = 0;
Distance = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capture Mouse Input
if( CONTROLS == "VIRTUAL" ) {
    _mouse[0,0] = device_mouse_x_to_gui( 0 );
    _mouse[0,1] = device_mouse_y_to_gui( 0 );
    _mouse[1,0] = device_mouse_x_to_gui( 1 );
    _mouse[1,1] = device_mouse_y_to_gui( 1 );
    if( device_mouse_check_button_pressed( 0, mb_left ) ) {
        if( _mouse[0,0] &gt; bbox_left &amp;&amp; _mouse[0,0] &lt; bbox_right
            &amp;&amp; _mouse[0,1] &gt; bbox_top &amp;&amp; _mouse[0,1] &lt; bbox_bottom ) {
            Selected = true;
            DeviceID = 0;
        }
    }
    if( device_mouse_check_button_pressed( 1, mb_left ) ) {
        if( _mouse[1,0] &gt; bbox_left &amp;&amp; _mouse[1,0] &lt; bbox_right
            &amp;&amp; _mouse[1,1] &gt; bbox_top &amp;&amp; _mouse[1,1] &lt; bbox_bottom ) {
            Selected = true;
            DeviceID = 1;
        }
    }
    if( device_mouse_check_button_released( DeviceID, mb_left ) ) {
        Selected = false;
        x = CenterX;
        y = CenterY;
        Distance = 0;
    }
    if( Selected ) {
        var _mouse_distance = point_distance( CenterX, CenterY, _mouse[DeviceID,0], _mouse[DeviceID,1] );
        var _mouse_angle = point_direction( CenterX, CenterY, _mouse[DeviceID,0], _mouse[DeviceID,1] );
        var _distance = min( _mouse_distance, 128 );
        x = CenterX + _distance * dcos( _mouse_angle );
        y = CenterY - _distance * dsin( _mouse_angle );
    }
    _mouse = 0; // Free up array memory
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capture Keyboard Input
if( CONTROLS == "PC" ) {
    var _Angle = 0;
    var _Distance = 128;
    if( keyboard_check( ord("W") ) &amp;&amp; keyboard_check( ord("A") ) ) {
        _Angle = 90 + 45;
    } else if( keyboard_check( ord("A") ) &amp;&amp; keyboard_check( ord("S") ) ) {
        _Angle = 180 + 45;
    } else if( keyboard_check( ord("S") ) &amp;&amp; keyboard_check( ord("D") ) ) {
        _Angle = 270 + 45;
    } else if( keyboard_check( ord("D") ) &amp;&amp; keyboard_check( ord("W") ) ) {
        _Angle = 45;
    } else if( keyboard_check( ord("W") ) ) {
        _Angle = 90;
    } else if( keyboard_check( ord("A") ) ) {
        _Angle = 180;
    } else if( keyboard_check( ord("S") ) ) {
        _Angle = 270;
    } else if( keyboard_check( ord("D") ) ) {
        _Angle = 0;
    } else {
        _Distance = 0;
    }
    if( !Selected ) {
        x = CenterX + _Distance * dcos( _Angle );
        y = CenterY - _Distance * dsin( _Angle );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capture Gamepad input
if( CONTROLS == "GAMEPAD" ) {
    if( DeviceID == 0 ) {
        var _HAxis = gamepad_axis_value(0, gp_axislh);
        var _VAxis = gamepad_axis_value(0, gp_axislv);
    } else if( DeviceID == 1 ) {
        var _HAxis = gamepad_axis_value(0, gp_axisrh);
        var _VAxis = gamepad_axis_value(0, gp_axisrv);
    }
    var _Angle = Angle;
    var _Distance = 128 * point_distance( 0, 0, _HAxis, _VAxis );
    if( _Distance &lt; 3 ) {
        _Distance = 0;
        //Selected = false;
    } else {
        _Angle = point_direction( 0, 0, _HAxis, _VAxis );
        //Selected = true;
    }
    //if( !Selected ) {
        x = CenterX + _Distance * dcos( _Angle );
        y = CenterY - _Distance * dsin( _Angle );
    //}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Properties
Distance = point_distance( CenterX, CenterY, x, y );
if( Distance &gt; 3 )
    Angle = point_direction( CenterX, CenterY, x, y );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_circle( CenterX, CenterY, 128, true );
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// No draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
